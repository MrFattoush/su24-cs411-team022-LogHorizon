<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Games - Game Recommender</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 0;
            margin: 0;
            background: #f8f9fa;
        }

        /* Navbar Styles */
        .top-navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 0.75rem 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .top-navbar .navbar-brand {
            color: white !important;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.5);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            color: white;
            border-color: white;
            transform: translateY(-2px);
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 20px;
        }

        .game-list {
            margin-bottom: 20px;
        }

        .game-item {
            border: 1px solid #ccc;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 10px;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .game-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .game-item h3 {
            margin: 0 0 10px 0;
            color: #333;
        }

        .game-item p {
            margin: 5px 0;
            color: #666;
        }

        .game-item button {
            margin-top: 10px;
            margin-right: 10px;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
        }

        .game-item button:first-of-type {
            background: #667eea;
            color: white;
        }

        .game-item button:first-of-type:hover {
            background: #5568d3;
            transform: translateY(-2px);
        }

        .game-item button:last-of-type {
            background: #f44336;
            color: white;
        }

        .game-item button:last-of-type:hover {
            background: #d32f2f;
            transform: translateY(-2px);
        }

        .form-container {
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

            .form-container form {
                display: flex;
                flex-direction: column;
            }

                .form-container form input,
                .form-container form button {
                    margin-bottom: 10px;
                    padding: 8px;
                    font-size: 16px;
                }
    </style>
</head>
<body>
    <!-- Top Navigation Bar -->
    <nav class="top-navbar">
        <div class="d-flex justify-content-between align-items-center">
            <span class="navbar-brand mb-0">🎮 Game Recommender</span>
            <a href="/logout" class="logout-btn">
                <i class="bi bi-box-arrow-right"></i>
                Logout
            </a>
        </div>
    </nav>

    <div class="container">
        <h1>Games</h1>

        <!-- NEW: Cohere-powered semantic search -->
        <div class="form-container" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
            <h2>🎮 AI-Powered Game Recommendations</h2>
            <p>Describe what kind of game you're looking for in natural language!</p>
            <form id="recommendForm">
                <input type="text" id="recommendQuery" placeholder="e.g., 'I want a relaxing farming simulation game'" required>
                <button type="submit">🔍 Get AI Recommendations</button>
            </form>
            <div id="recommendStatus" style="margin-top: 10px; font-size: 14px;"></div>
        </div>

        <!-- Edit Game Modal -->
        <div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; justify-content: center; align-items: center;">
            <div style="background: white; padding: 30px; border-radius: 15px; max-width: 500px; width: 90%; box-shadow: 0 10px 40px rgba(0,0,0,0.3);">
                <h2>Edit Game</h2>
                <form id="editGameForm">
                    <input type="hidden" id="editGameId">
                    <input type="text" id="editTitle" placeholder="Game Title" required style="width: 100%; margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    <input type="text" id="editDeveloper" placeholder="Developer Name" required style="width: 100%; margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    <input type="number" step="0.01" id="editPrice" placeholder="Price" required style="width: 100%; margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    <input type="text" id="editTags" placeholder="Tags (e.g., Action, RPG)" required style="width: 100%; margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    <input type="date" id="editReleaseDate" required style="width: 100%; margin-bottom: 15px; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
                    <div style="display: flex; gap: 10px;">
                        <button type="submit" style="flex: 1; background: #667eea; color: white; border: none; padding: 10px; border-radius: 5px; cursor: pointer; font-weight: 600;">💾 Save Changes</button>
                        <button type="button" onclick="closeEditModal()" style="flex: 1; background: #ccc; color: #333; border: none; padding: 10px; border-radius: 5px; cursor: pointer; font-weight: 600;">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="form-container">
            <h2>Add New Game</h2>
            <form id="addGameForm">
                <input type="text" name="title" placeholder="Game Title" required>
                <input type="text" name="developer" placeholder="Developer Name" required>
                <input type="number" step="0.01" name="price" placeholder="Price (e.g., 29.99)" required>
                <input type="text" name="tags" placeholder="Tags (e.g., Action, RPG, Multiplayer)" required>
                <input type="date" name="releaseDate" required>
                <button type="submit">🎮 Add Game + Generate AI Embeddings</button>
            </form>
        </div>

        <!-- NEW: AI Recommendations Results -->
        <div class="game-list" id="recommendationsList" style="display: none;">
            <h2>🤖 AI Recommendations</h2>
            <div id="recommendationsContent">
                <!-- AI recommendations will be displayed here -->
            </div>
        </div>

        <div class="game-list" id="gameList">
            <h2>Game List</h2>
            <!-- Game items will be dynamically added here -->
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetchGames();
            setupRecommendationForm();
        });

        function setupRecommendationForm() {
            document.getElementById('recommendForm').addEventListener('submit', function(event) {
                event.preventDefault();
                const query = document.getElementById('recommendQuery').value;
                if (query.trim()) {
                    getAIRecommendations(query);
                }
            });
        }

        async function getAIRecommendations(query) {
            const statusDiv = document.getElementById('recommendStatus');
            const recommendationsList = document.getElementById('recommendationsList');
            const recommendationsContent = document.getElementById('recommendationsContent');
            
            statusDiv.innerHTML = '🤖 AI is analyzing your request...';
            statusDiv.style.color = '#4CAF50';
            
            try {
                const response = await fetch('/api/recommend', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query: query })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    displayRecommendations(data);
                    statusDiv.innerHTML = `✅ Found ${data.recommendations.length} recommendations from ${data.totalGames} games`;
                    statusDiv.style.color = '#4CAF50';
                } else {
                    statusDiv.innerHTML = `❌ Error: ${data.error}`;
                    statusDiv.style.color = '#f44336';
                }
            } catch (error) {
                console.error('Error getting recommendations:', error);
                statusDiv.innerHTML = '❌ Error connecting to AI service';
                statusDiv.style.color = '#f44336';
            }
        }

        function displayRecommendations(data) {
            const recommendationsList = document.getElementById('recommendationsList');
            const recommendationsContent = document.getElementById('recommendationsContent');
            
            recommendationsContent.innerHTML = '';
            
            if (data.recommendations.length === 0) {
                recommendationsContent.innerHTML = '<p>No recommendations found. Try a different query!</p>';
                recommendationsList.style.display = 'block';
                return;
            }
            
            data.recommendations.forEach((game, index) => {
                const gameCard = document.createElement('div');
                gameCard.className = 'game-item';
                gameCard.style.border = '2px solid #667eea';
                gameCard.style.background = 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)';
                
                const similarityPercentage = (game.similarity * 100).toFixed(1);
                
                gameCard.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: start;">
                        <div>
                            <h3 style="margin: 0; color: #333;">${index + 1}. ${game.title}</h3>
                            <p style="margin: 5px 0; color: #666;"><strong>Developer:</strong> ${game.developer}</p>
                            <p style="margin: 5px 0; color: #666;"><strong>Price:</strong> $${game.price}</p>
                            <p style="margin: 5px 0; color: #666;"><strong>Tags:</strong> ${game.tags || 'N/A'}</p>
                            <p style="margin: 5px 0; color: #666; font-size: 12px;"><strong>Description:</strong> ${game.description}</p>
                        </div>
                        <div style="text-align: right;">
                            <div style="background: #667eea; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;">
                                ${similarityPercentage}% Match
                            </div>
                        </div>
                    </div>
                `;
                
                recommendationsContent.appendChild(gameCard);
            });
            
            recommendationsList.style.display = 'block';
            
            recommendationsList.scrollIntoView({ behavior: 'smooth' });
        }

        function fetchGames() {
            // Fetch games from the server and display them
            fetch('/api/game')
                .then(response => response.json())
                .then(data => {
                    console.log('Data:', data); // Log the data for debugging
                    const gameList = document.getElementById('gameList');
                    gameList.innerHTML = ''; // Clear existing content
                    data.forEach(game => {
                        const gameItem = document.createElement('div');
                        gameItem.className = 'game-item';
                        gameItem.innerHTML = `
                            <h3>${game.Title}</h3>
                            <p><strong>Developer:</strong> ${game.Developer}</p>
                            <p><strong>Price:</strong> $${game.Price}</p>
                            ${game.Tags ? `<p><strong>Tags:</strong> ${game.Tags}</p>` : ''}
                            ${game.ReleaseDate ? `<p><strong>Released:</strong> ${game.ReleaseDate}</p>` : ''}
                            <div style="margin-top: 15px;">
                                <button onclick="editGame(${game.GameID})">Edit</button>
                                <button onclick="deleteGame(${game.GameID})">Delete</button>
                            </div>
                        `;
                        gameList.appendChild(gameItem);
                    });
                })
                .catch(error => console.error('Error fetching games:', error));
        }
        document.getElementById('addGameForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const submitButton = this.querySelector('button[type="submit"]');
            
            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '🔄 Adding game and generating AI embeddings...';
            
            const data = {
                title: formData.get('title'),
                developer: formData.get('developer'),
                releaseDate: formData.get('releaseDate'),
                price: parseFloat(formData.get('price')),
                tags: formData.get('tags')
            };

            try {
                const response = await fetch('/api/game', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert('✅ ' + result.message);
                    this.reset(); // Clear the form
                    fetchGames(); // Refresh game list
                } else {
                    alert('❌ Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error adding game:', error);
                alert('❌ Error adding game. Please try again.');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = '🎮 Add Game + Generate AI Embeddings';
            }
        });

        function editGame(gameId) {
            // Fetch game details
            fetch('/api/game')
                .then(response => response.json())
                .then(games => {
                    const game = games.find(g => g.GameID === gameId);
                    if (game) {
                        // Populate edit form
                        document.getElementById('editGameId').value = game.GameID;
                        document.getElementById('editTitle').value = game.Title;
                        document.getElementById('editDeveloper').value = game.Developer;
                        document.getElementById('editPrice').value = game.Price;
                        document.getElementById('editTags').value = game.Tags || '';
                        document.getElementById('editReleaseDate').value = game.ReleaseDate || '';
                        
                        // Show modal
                        document.getElementById('editModal').style.display = 'flex';
                    }
                })
                .catch(error => console.error('Error fetching game details:', error));
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Handle edit form submission
        document.getElementById('editGameForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const gameId = document.getElementById('editGameId').value;
            const data = {
                title: document.getElementById('editTitle').value,
                developer: document.getElementById('editDeveloper').value,
                price: parseFloat(document.getElementById('editPrice').value),
                tags: document.getElementById('editTags').value,
                releaseDate: document.getElementById('editReleaseDate').value
            };

            try {
                const response = await fetch(`/api/games/${gameId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert('✅ ' + result.message);
                    closeEditModal();
                    fetchGames(); // Refresh game list
                } else {
                    alert('❌ Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error updating game:', error);
                alert('❌ Error updating game. Please try again.');
            }
        });

        function deleteGame(gameId) {
            if (!confirm('Are you sure you want to delete this game? This will also remove it from AI recommendations.')) {
                return;
            }
            
            fetch(`/api/games/${gameId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    alert('✅ ' + data.message);
                    fetchGames(); // Refresh game list after deletion
                } else {
                    alert('❌ Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error deleting game:', error);
                alert('❌ Error deleting game. Please try again.');
            });
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
